<div id="canvas" class="canvas"></div>

</body>

</html>

<script type="module">
    import * as THREE from 'https://cdn.skypack.dev/three@v0.129.0'
    import { RenderPass } from 'https://threejs.org/examples/jsm/postprocessing/RenderPass.js'

    var mesh, renderer, scene, camera, composer
    const raycaster = new THREE.Raycaster()
    const mouse = new THREE.Vector2()



    function init() {
        //scene
        scene = new THREE.Scene()
        scene.background = new THREE.Color(0x0D0FD4)

        //renderer
        var container = document.getElementById('canvas')
        renderer = new THREE.WebGLRenderer()

        renderer.setPixelRatio(window.devicePixelRatio * 0.01)
        renderer.setSize(document.documentElement.scrollWidth, document.documentElement.scrollHeight)
        renderer.antialias = true
        renderer.gammaOutput = true
        renderer.gammaFactor = 2.2

        container.appendChild(renderer.domElement)

        //camera
        camera = new THREE.PerspectiveCamera(100, window.innerWidth / window.innerHeight, 0.1, 1000)
        camera.position.z = 3
        camera.position.x = 0
        camera.position.y = 0

        //textures
        var geometry = new THREE.SphereGeometry(2.9, 15, 15)

        //materials
        const m = new THREE.ShaderMaterial({

            uniforms: {},

            vertexShader: [
                "varying vec2 vUV;",
                "varying vec3 vNormal;",

                "void main() {",

                "vUV = uv;",
                "vNormal = vec3( normal );",
                "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

                "}"
            ].join("\n"),

            fragmentShader: [
                "varying vec2 vUV;",
                "varying vec3 vNormal;",

                "void main() {",

                "vec4 c = vec4( abs( vNormal ) + vec3( vUV, 0.0 ), 0.0 );",
                "gl_FragColor = c;",

                "}"
            ].join("\n")
        })

        //meshes
        mesh = new THREE.Mesh(geometry, m)
        scene.add(mesh)
        mesh.rotation.y += Math.random()
    }

    var rotationSpeed = 0.0005
    function animate() {
        raycaster.setFromCamera(mouse, camera)
        mesh.rotation.y += rotationSpeed
        requestAnimationFrame(animate)
        renderer.render(scene, camera)
        composer.render()
    }

    window.addEventListener('resize', onWindowResize, false)
    window.addEventListener('popstate', onWindowResize)

    function onWindowResize() {
        console.log('test')
        camera.aspect = document.documentElement.scrollWidth / document.documentElement.scrollHeight
        renderer.setSize(document.documentElement.scrollWidth, document.documentElement.scrollHeight)
        composer.setSize(document.documentElement.scrollWidth, document.documentElement.scrollHeight)
        camera.updateProjectionMatrix()
    }

    init()
    animate()

</script>